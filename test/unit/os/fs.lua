local cimport, cppimport, internalize, eq, neq, ffi, lib, cstr, to_cstr
do
  local _obj_0 = require('test.lib.helpers')
  cimport, cppimport, internalize, eq, neq, ffi, lib, cstr, to_cstr = _obj_0.cimport, _obj_0.cppimport, _obj_0.internalize, _obj_0.eq, _obj_0.neq, _obj_0.ffi, _obj_0.lib, _obj_0.cstr, _obj_0.to_cstr
end
require('lfs')
require('bit')
local fs = cimport('./src/nvim/os/os.h')
local FAIL = 0
local OK = 1
cppimport('sys/stat.h')
return describe('fs function', function()
  setup(function()
    lfs.mkdir('unit-test-directory');
    (io.open('unit-test-directory/test.file', 'w')).close();
    (io.open('unit-test-directory/test_2.file', 'w')).close()
    lfs.link('test.file', 'unit-test-directory/test_link.file', true)
    absolute_executable = arg[0]
    directory, executable_name = string.match(absolute_executable, '^(.*)/(.*)$')
  end)
  teardown(function()
    os.remove('unit-test-directory/test.file')
    os.remove('unit-test-directory/test_2.file')
    os.remove('unit-test-directory/test_link.file')
    return lfs.rmdir('unit-test-directory')
  end)
  describe('os_dirname', function()
    local os_dirname
    os_dirname = function(buf, len)
      return fs.os_dirname(buf, len)
    end
    before_each(function()
      len = (string.len(lfs.currentdir())) + 1
      buf = cstr(len, '')
    end)
    it('returns OK and writes current directory into the buffer if it is large\n    enough', function()
      eq(OK, (os_dirname(buf, len)))
      return eq(lfs.currentdir(), (ffi.string(buf)))
    end)
    return it('returns FAIL if the buffer is too small', function()
      local buf = cstr((len - 1), '')
      return eq(FAIL, (os_dirname(buf, (len - 1))))
    end)
  end)
  describe('path_full_dir_name', function()
    local path_full_dir_name
    path_full_dir_name = function(directory, buffer, len)
      directory = to_cstr(directory)
      return fs.path_full_dir_name(directory, buffer, len)
    end
    before_each(function()
      len = (string.len(lfs.currentdir())) + 22
      buffer = cstr(len, '')
    end)
    it('returns the absolute directory name of a given relative one', function()
      local result = path_full_dir_name('..', buffer, len)
      eq(OK, result)
      local old_dir = lfs.currentdir()
      lfs.chdir('..')
      local expected = lfs.currentdir()
      lfs.chdir(old_dir)
      return eq(expected, (ffi.string(buffer)))
    end)
    it('returns the current directory name if the given string is empty', function()
      eq(OK, (path_full_dir_name('', buffer, len)))
      return eq(lfs.currentdir(), (ffi.string(buffer)))
    end)
    it('fails if the given directory does not exist', function()
      return eq(FAIL, path_full_dir_name('does_not_exist', buffer, len))
    end)
    return it('works with a normal relative dir', function()
      local result = path_full_dir_name('unit-test-directory', buffer, len)
      eq(lfs.currentdir() .. '/unit-test-directory', (ffi.string(buffer)))
      return eq(OK, result)
    end)
  end)
  local os_isdir
  os_isdir = function(name)
    return fs.os_isdir((to_cstr(name)))
  end
  describe('os_isdir', function()
    it('returns false if an empty string is given', function()
      return eq(false, (os_isdir('')))
    end)
    it('returns false if a nonexisting directory is given', function()
      return eq(false, (os_isdir('non-existing-directory')))
    end)
    it('returns false if a nonexisting absolute directory is given', function()
      return eq(false, (os_isdir('/non-existing-directory')))
    end)
    it('returns false if an existing file is given', function()
      return eq(false, (os_isdir('unit-test-directory/test.file')))
    end)
    it('returns true if the current directory is given', function()
      return eq(true, (os_isdir('.')))
    end)
    it('returns true if the parent directory is given', function()
      return eq(true, (os_isdir('..')))
    end)
    it('returns true if an arbitrary directory is given', function()
      return eq(true, (os_isdir('unit-test-directory')))
    end)
    return it('returns true if an absolute directory is given', function()
      return eq(true, (os_isdir(directory)))
    end)
  end)
  describe('os_can_exe', function()
    local os_can_exe
    os_can_exe = function(name)
      return fs.os_can_exe((to_cstr(name)))
    end
    it('returns false when given a directory', function()
      return eq(false, (os_can_exe('./unit-test-directory')))
    end)
    it('returns false when given a regular file without executable bit set', function()
      return eq(false, (os_can_exe('unit-test-directory/test.file')))
    end)
    it('returns false when the given file does not exists', function()
      return eq(false, (os_can_exe('does-not-exist.file')))
    end)
    it('returns true when given an executable inside $PATH', function()
      return eq(true, (os_can_exe(executable_name)))
    end)
    return it('returns true when given an executable relative to the current dir', function()
      local old_dir = lfs.currentdir()
      lfs.chdir(directory)
      local relative_executable = './' .. executable_name
      eq(true, (os_can_exe(relative_executable)))
      return lfs.chdir(old_dir)
    end)
  end)
  describe('file permissions', function()
    local os_getperm
    os_getperm = function(filename)
      local perm = fs.os_getperm((to_cstr(filename)))
      return tonumber(perm)
    end
    local os_setperm
    os_setperm = function(filename, perm)
      return fs.os_setperm((to_cstr(filename)), perm)
    end
    local os_file_is_readonly
    os_file_is_readonly = function(filename)
      return fs.os_file_is_readonly((to_cstr(filename)))
    end
    local os_file_is_writable
    os_file_is_writable = function(filename)
      return fs.os_file_is_writable((to_cstr(filename)))
    end
    local bit_set
    bit_set = function(number, check_bit)
      if 0 == (bit.band(number, check_bit)) then
        return false
      else
        return true
      end
    end
    local set_bit
    set_bit = function(number, to_set)
      return bit.bor(number, to_set)
    end
    local unset_bit
    unset_bit = function(number, to_unset)
      return bit.band(number, (bit.bnot(to_unset)))
    end
    describe('os_getperm', function()
      it('returns -1 when the given file does not exist', function()
        return eq(-1, (os_getperm('non-existing-file')))
      end)
      it('returns a perm > 0 when given an existing file', function()
        return assert.is_true((os_getperm('unit-test-directory')) > 0)
      end)
      return it('returns S_IRUSR when the file is readable', function()
        local perm = os_getperm('unit-test-directory')
        return assert.is_true((bit_set(perm, ffi.C.kS_IRUSR)))
      end)
    end)
    describe('os_setperm', function()
      it('can set and unset the executable bit of a file', function()
        local perm = os_getperm('unit-test-directory/test.file')
        perm = unset_bit(perm, ffi.C.kS_IXUSR)
        eq(OK, (os_setperm('unit-test-directory/test.file', perm)))
        perm = os_getperm('unit-test-directory/test.file')
        assert.is_false((bit_set(perm, ffi.C.kS_IXUSR)))
        perm = set_bit(perm, ffi.C.kS_IXUSR)
        eq(OK, os_setperm('unit-test-directory/test.file', perm))
        perm = os_getperm('unit-test-directory/test.file')
        return assert.is_true((bit_set(perm, ffi.C.kS_IXUSR)))
      end)
      return it('fails if given file does not exist', function()
        local perm = ffi.C.kS_IXUSR
        return eq(FAIL, (os_setperm('non-existing-file', perm)))
      end)
    end)
    describe('os_file_is_readonly', function()
      it('returns true if the file is readonly', function()
        local perm = os_getperm('unit-test-directory/test.file')
        local perm_orig = perm
        perm = unset_bit(perm, ffi.C.kS_IWUSR)
        perm = unset_bit(perm, ffi.C.kS_IWGRP)
        perm = unset_bit(perm, ffi.C.kS_IWOTH)
        eq(OK, (os_setperm('unit-test-directory/test.file', perm)))
        eq(true, os_file_is_readonly('unit-test-directory/test.file'))
        return eq(OK, (os_setperm('unit-test-directory/test.file', perm_orig)))
      end)
      return it('returns false if the file is writable', function()
        return eq(false, os_file_is_readonly('unit-test-directory/test.file'))
      end)
    end)
    return describe('os_file_is_writable', function()
      it('returns 0 if the file is readonly', function()
        local perm = os_getperm('unit-test-directory/test.file')
        local perm_orig = perm
        perm = unset_bit(perm, ffi.C.kS_IWUSR)
        perm = unset_bit(perm, ffi.C.kS_IWGRP)
        perm = unset_bit(perm, ffi.C.kS_IWOTH)
        eq(OK, (os_setperm('unit-test-directory/test.file', perm)))
        eq(0, os_file_is_writable('unit-test-directory/test.file'))
        return eq(OK, (os_setperm('unit-test-directory/test.file', perm_orig)))
      end)
      it('returns 1 if the file is writable', function()
        return eq(1, os_file_is_writable('unit-test-directory/test.file'))
      end)
      return it('returns 2 when given a folder with rights to write into', function()
        return eq(2, os_file_is_writable('unit-test-directory'))
      end)
    end)
  end)
  describe('file operations', function()
    setup(function()
      return (io.open('unit-test-directory/test_remove.file', 'w')).close()
    end)
    teardown(function()
      return os.remove('unit-test-directory/test_remove.file')
    end)
    local os_file_exists
    os_file_exists = function(filename)
      return fs.os_file_exists((to_cstr(filename)))
    end
    local os_rename
    os_rename = function(path, new_path)
      return fs.os_rename((to_cstr(path)), (to_cstr(new_path)))
    end
    local os_remove
    os_remove = function(path)
      return fs.os_remove((to_cstr(path)))
    end
    describe('os_file_exists', function()
      it('returns false when given a non-existing file', function()
        return eq(false, (os_file_exists('non-existing-file')))
      end)
      return it('returns true when given an existing file', function()
        return eq(true, (os_file_exists('unit-test-directory/test.file')))
      end)
    end)
    describe('os_rename', function()
      local test = 'unit-test-directory/test.file'
      local not_exist = 'unit-test-directory/not_exist.file'
      it('can rename file if destination file does not exist', function()
        eq(OK, (os_rename(test, not_exist)))
        eq(false, (os_file_exists(test)))
        eq(true, (os_file_exists(not_exist)))
        return eq(OK, (os_rename(not_exist, test)))
      end)
      it('fail if source file does not exist', function()
        return eq(FAIL, (os_rename(not_exist, test)))
      end)
      return it('can overwrite destination file if it exists', function()
        local other = 'unit-test-directory/other.file'
        local file = io.open(other, 'w')
        file:write('other')
        file:flush()
        file:close()
        eq(OK, (os_rename(other, test)))
        eq(false, (os_file_exists(other)))
        eq(true, (os_file_exists(test)))
        file = io.open(test, 'r')
        eq('other', (file:read('*all')))
        return file:close()
      end)
    end)
    return describe('os_remove', function()
      it('returns non-zero when given a non-existing file', function()
        return neq(0, (os_remove('non-existing-file')))
      end)
      return it('removes the given file and returns 0', function()
        eq(true, (os_file_exists('unit-test-directory/test_remove.file')))
        eq(0, (os_remove('unit-test-directory/test_remove.file')))
        return eq(false, (os_file_exists('unit-test-directory/test_remove.file')))
      end)
    end)
  end)
  return describe('folder operations', function()
    local os_mkdir
    os_mkdir = function(path, mode)
      return fs.os_mkdir((to_cstr(path)), mode)
    end
    local os_rmdir
    os_rmdir = function(path)
      return fs.os_rmdir((to_cstr(path)))
    end
    describe('os_mkdir', function()
      it('returns non-zero when given a already existing directory', function()
        local mode = ffi.C.kS_IRUSR + ffi.C.kS_IWUSR + ffi.C.kS_IXUSR
        return neq(0, (os_mkdir('unit-test-directory', mode)))
      end)
      return it('creates a directory and returns 0', function()
        local mode = ffi.C.kS_IRUSR + ffi.C.kS_IWUSR + ffi.C.kS_IXUSR
        eq(false, (os_isdir('unit-test-directory/new-dir')))
        eq(0, (os_mkdir('unit-test-directory/new-dir', mode)))
        eq(true, (os_isdir('unit-test-directory/new-dir')))
        return lfs.rmdir('unit-test-directory/new-dir')
      end)
    end)
    describe('os_rmdir', function()
      it('returns non_zero when given a non-existing directory', function()
        return neq(0, (os_rmdir('non-existing-directory')))
      end)
      return it('removes the given directory and returns 0', function()
        lfs.mkdir('unit-test-directory/new-dir')
        eq(0, (os_rmdir('unit-test-directory/new-dir', mode)))
        return eq(false, (os_isdir('unit-test-directory/new-dir')))
      end)
    end)
    return describe('FileInfo', function()
      local file_info_new
      file_info_new = function()
        local file_info = ffi.new('FileInfo[1]')
        file_info[0].stat.st_ino = 0
        file_info[0].stat.st_dev = 0
        return file_info
      end
      local is_file_info_filled
      is_file_info_filled = function(file_info)
        return file_info[0].stat.st_ino > 0 and file_info[0].stat.st_dev > 0
      end
      describe('os_get_file_info', function()
        it('returns false if given an non-existing file', function()
          local file_info = file_info_new()
          return assert.is_false((fs.os_get_file_info('/non-existent', file_info)))
        end)
        it('returns true if given an existing file and fills file_info', function()
          local file_info = file_info_new()
          local path = 'unit-test-directory/test.file'
          assert.is_true((fs.os_get_file_info(path, file_info)))
          return assert.is_true((is_file_info_filled(file_info)))
        end)
        return it('returns the file info of the linked file, not the link', function()
          local file_info = file_info_new()
          local path = 'unit-test-directory/test_link.file'
          assert.is_true((fs.os_get_file_info(path, file_info)))
          assert.is_true((is_file_info_filled(file_info)))
          local mode = tonumber(file_info[0].stat.st_mode)
          return eq(ffi.C.kS_IFREG, (bit.band(mode, ffi.C.kS_IFMT)))
        end)
      end)
      describe('os_get_file_info_link', function()
        it('returns false if given an non-existing file', function()
          local file_info = file_info_new()
          return assert.is_false((fs.os_get_file_info_link('/non-existent', file_info)))
        end)
        it('returns true if given an existing file and fills file_info', function()
          local file_info = file_info_new()
          local path = 'unit-test-directory/test.file'
          assert.is_true((fs.os_get_file_info_link(path, file_info)))
          return assert.is_true((is_file_info_filled(file_info)))
        end)
        return it('returns the file info of the link, not the linked file', function()
          local file_info = file_info_new()
          local path = 'unit-test-directory/test_link.file'
          assert.is_true((fs.os_get_file_info_link(path, file_info)))
          assert.is_true((is_file_info_filled(file_info)))
          local mode = tonumber(file_info[0].stat.st_mode)
          return eq(ffi.C.kS_IFLNK, (bit.band(mode, ffi.C.kS_IFMT)))
        end)
      end)
      describe('os_get_file_info_fd', function()
        it('returns false if given an invalid file descriptor', function()
          local file_info = file_info_new()
          return assert.is_false((fs.os_get_file_info_fd(-1, file_info)))
        end)
        return it('returns true if given an file descriptor and fills file_info', function()
          local file_info = file_info_new()
          local path = 'unit-test-directory/test.file'
          local fd = ffi.C.open(path, 0)
          assert.is_true((fs.os_get_file_info_fd(fd, file_info)))
          assert.is_true((is_file_info_filled(file_info)))
          return ffi.C.close(fd)
        end)
      end)
      return describe('os_file_info_id_equal', function()
        it('returns false if file infos represent different files', function()
          local file_info_1 = file_info_new()
          local file_info_2 = file_info_new()
          local path_1 = 'unit-test-directory/test.file'
          local path_2 = 'unit-test-directory/test_2.file'
          assert.is_true((fs.os_get_file_info(path_1, file_info_1)))
          assert.is_true((fs.os_get_file_info(path_2, file_info_2)))
          return assert.is_false((fs.os_file_info_id_equal(file_info_1, file_info_2)))
        end)
        it('returns true if file infos represent the same file', function()
          local file_info_1 = file_info_new()
          local file_info_2 = file_info_new()
          local path = 'unit-test-directory/test.file'
          assert.is_true((fs.os_get_file_info(path, file_info_1)))
          assert.is_true((fs.os_get_file_info(path, file_info_2)))
          return assert.is_true((fs.os_file_info_id_equal(file_info_1, file_info_2)))
        end)
        return it('returns true if file infos represent the same file (symlink)', function()
          local file_info_1 = file_info_new()
          local file_info_2 = file_info_new()
          local path_1 = 'unit-test-directory/test.file'
          local path_2 = 'unit-test-directory/test_link.file'
          assert.is_true((fs.os_get_file_info(path_1, file_info_1)))
          assert.is_true((fs.os_get_file_info(path_2, file_info_2)))
          return assert.is_true((fs.os_file_info_id_equal(file_info_1, file_info_2)))
        end)
      end)
    end)
  end)
end)
